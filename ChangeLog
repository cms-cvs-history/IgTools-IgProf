2004-05-14  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc: Remove messing with thread-specific data, it just
	creates problems -- it allocates memory and we are sometimes
	unable to capture all threads.  Just make sure the performance
	profiler doesn't call us from a signal handler.

	* IgProfPerf.cc: Pass valid memory to thread start routine.

	* IgProf.cc: Properly check if the program is multi-threaded and
	remember that in all decisions.  Mark program non-threaded when we
	are quitting to avoid invoking into pthreads in destructors
	(e.g. from late-delivered profile signal).  Try to work around
	bugs in linux recursive mutex handling within signals.
	* IgProf.h (IgProfLock): Update.

	* IgProfPerf.cc: Synchronise profiling signal thread startup.
	Correctly check whether profiling module is enabled.  Make sure
	profiling signal is not sent before we are ready for it in
	captured threads (may still not work correctly -- sometimes COBRA
	seems to catch SIGSEGV the minute we capture the thread?).

	* IgProfMem.cc (add): Live counter is cumulative, not maxed.

	* IgProf.cc, IgProfMem.cc, IgProfFileDesc.cc: Trap all functions
	twice, once for main program and another time for executable, as
	we used to do for "exit()".  Required for some binaries.  To be
	cleaned up so a single macro does both variations.

	* IgProfFileDesc.cc (initialize): Fix option handling.

	* IgProfFileDesc.cc: Implement.

2004-05-13  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Normalise counters early.

	* IgProfMem.cc, IgProfPerf.cc, IgProfFileDesc.cc: Fix option
	parsing.

	* IgProf.cc (igkill): Lock only once we know we will handle this
	signal to avoid dead-locking problems (e.g. with SIGPROF).

2004-05-13  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.h: Turn off verbosity for proper usage.

	* IgProf.h, IgProf.cc (IGPROF_ASSERT, IGPROF_TRACE, panic): New
	profiler tool debugging utilities.

	* IgProfFileDesc.cc, IgProfPerf.cc: Use them.

	* IgProfMem.cc: Use them.  Allow remove() to be called on
	objects whose creation we didn't track.

2004-05-12  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Fix dump reading bugs.  Take into account key
	ordering options for output.

	* igprof-analyse: First complete version (except recursion).

	* IgProf.cc: Output counter counts.  Clean up output layout.

	* igprof, IgProfMem.cc: Counters now have counts as well as
	totals, no need for allocations counter any more.

	* igprof-analyse: First semi-functional version.

	* IgProfMem.cc, IgProfPerf.cc, IgProfFileDesc.cc: Remove
	cumulative counters, they are handled in the analyser.

2004-05-11  Lassi A. Tuura  <lat@iki.fi>

	* scripts/igprof, IgProf.cc, IgProfPerf.cc: Fixes for OS X.

2004-05-10  Lassi A. Tuura  <lat@iki.fi>

	* scripts/igprof-analyse: Preliminary analysis.

	* IgProfMem.cc, IgProfPerf.cc, IgProfFileDesc.cc (initialize):
	Make progress in the option string when unrecognised input is found.

	* scripts/igprof: Adapt to new profiler core.
	* scripts/igprof-analyse: New, analyse output files.

	* IgProf.h (IGPROF_LIBHOOK): New, for library-targeted hooks.
	* IgProf.cc: Use it to capture exit() from libc directly in
	non-dynamic programs such as "ls".
	* IgProfPerf.cc: Implement.
	* IgProfMem.cc: Remove unnecessary crud.

	* IgProf.h, IgProf.cc: Clean up internal static variable usage.
	Provide clean means to lock and unlock profiler core and activate
	or deactivate all enabled modules.  Use the facility in hooked
	functions.  Dump output in XML.  Dump symbol table separately
	from the trace.
	* IgProfFileDesc.cc: Use new profiler locking/activation scheme.
	* IgProfPerf.cc: Use new profiler locking/activation scheme.
	* IgProfMem.cc: Use new profiler locking/activation scheme.
	Automatically enable live counting if leak checking is turned on.

2004-05-07  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc (dumpTrace): Dump node address so leaks can be matched.

	* Preliminary version rewritten using IgHook.

2004-04-16  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* IgSProfTimerHooks.cc, IgSProfPThreadCreateHooks.cc: using thread
	as argument name in place of __thread as the latter is a keyword
	with more recent versions of glibc.
	Fixed the __THROW statement in pthread_join () as the prototype
	has changed in more recent versions of glibc.

2004-03-15  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* IgSProfTimerHooks.cc: more robust support for multithreading.

	* IgSProfPThreadCreateHooks.cc: added magic code for
	wrapping pthread_create and several other pthread related
	functions in order to intercept the creation of a new thread.

	* IgMProfSymbolFilter.cc (IgMProfSymbolFilter): beatification
	fixes.

2004-02-04  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* test_forking.cc: test for pthreads profiling... 

	* IgSProfPThreadCreateHooks.cc: workaround to enable SIGPROF also
	for spawned threads... It shouldn't be necessary, but it looks
	like it is...

	* IgMProfTreeTextBrowser.cc (dump): "MemProfLib:" references in
	output substituted with "IgProf:".

	* IgSProfTimerHooks.cc (IGUANA_sprof_sigprof_hook): rebroadcasting
	signal to other threads to overcome linux strange behavior when
	using pthreads and signals.

2004-02-03  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* test/BuildFile, test_forking.cc: added test for multithreading support.

	* IgMProfTreeTextBrowser.cc (dump): name is generated on dump() to
	avoid problems with multiple threads.
	(dumpFlatProfile): hopefully, nicer layout with big numbers...

	* IgSProfTimerHooks.cc: added multithread support.

2003-11-17  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* IgMProfAllocation.h (struct IgMProfAllocation): this structure
	is used to keep track of the size of a live allocation and to
	which branch (by storing the end node of the branch) it belongs.

	* test_liveAllocations.cc: new test for live allocations.

	* test/BuildFile: new test for live allocations added.
	
	* IgSProfTimerHooks.cc (IGUANA_sprof_sigprof_hook): now it
	uses the new addCurrentStacktrace API.

	* IgMProfTreeTextBrowser.cc: now supports the use of
	IgMProfTreeRep to keep track of leaks. New filenames:
	memoryPID.flat for the memory profiler, leaksPID.flat for the leak
	report and performancePID.flat for the performance
	profiler. Cosmetic fixes.

	* IgMProfTreeRep.cc, IgMProfTreeRep.h: now the tree can keep track
	of the information about max live heap size. When a new allocation
	is performed, the current allocated memory (in m_count) is
	compared with the maximum found in m_maxCount. If it is bigger,
	m_maxCount is upgraded to the new value. Moreover each live
	allocation is tracked in m_endNodeMap. When a free () occurs, the
	pointer to the branch relative at such an allocation is searched
	in such a map and the branch is walked backward removing the
	amount of memory freed from m_count.

	* IgMProfTreeLeaf.h (IgMProfTreeLeaf): new structure to allow to
	keep the information about max live heap size. Also it now has an
	m_parent field which olds the pointer to the parent node in the
	tree.

	* IgMProfMallocHooks.cc: now passing also the allocated memory
	address to addCurrentStacktrace, as it is needed for max live heap
	size tracking. Removing old leak checking code. Cosmetic fixes.

	* IgMProfConfiguration.h (IgMProfConfiguration): new totalsum
	parameter which makes the profiler keep track of the total
	allocation performed by a function, rather than the max live heap
	size for that function.

	* IgMProfBootstrap.cc, IgMProfBootstrap.h: cosmetic fixes. Now
	the leak information is kept in the same tree structure of the
	memory profiler, so that IgMProfLinearSingleton (the linear
	structure used for the leaks) is not necessary anymore. Renamed
	the output file names to a better layout. 

	* scripts/igprof: new --total-sum (or -ts) option to obtain the
	cumulative allocation size performed by a function. By default the
	output is now the max live heap size per function.

2003-11-10  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* test/test_overriddenNew.cc (main): removed unused arguments from
	main.

2003-10-07  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* (all files): renamed Ig_Imports/MemProfLib to Ig_Tools/IgProf.
	MEM_PROF_LIB changed to IG_PROF.

	* (all files): copied as is from IGUANA Ig_Imports/MemProfLib
	
	* BuildFile: moved from Ig_Tools/IgProf/src to Ig_Tools/IgProf.

